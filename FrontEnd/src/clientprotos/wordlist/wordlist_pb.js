// source: wordlist.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.wlservice.Empty', null, global);
goog.exportSymbol('proto.wlservice.Filter', null, global);
goog.exportSymbol('proto.wlservice.Id', null, global);
goog.exportSymbol('proto.wlservice.Response', null, global);
goog.exportSymbol('proto.wlservice.Word', null, global);
goog.exportSymbol('proto.wlservice.WordlistInfo', null, global);
goog.exportSymbol('proto.wlservice.Wordlists', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wlservice.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.Empty.displayName = 'proto.wlservice.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wlservice.Filter.repeatedFields_, null);
};
goog.inherits(proto.wlservice.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.Filter.displayName = 'proto.wlservice.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.Id = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wlservice.Id, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.Id.displayName = 'proto.wlservice.Id';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.Wordlists = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wlservice.Wordlists.repeatedFields_, null);
};
goog.inherits(proto.wlservice.Wordlists, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.Wordlists.displayName = 'proto.wlservice.Wordlists';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.WordlistInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wlservice.WordlistInfo.repeatedFields_, null);
};
goog.inherits(proto.wlservice.WordlistInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.WordlistInfo.displayName = 'proto.wlservice.WordlistInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wlservice.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.Word.displayName = 'proto.wlservice.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wlservice.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wlservice.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wlservice.Response.displayName = 'proto.wlservice.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.Empty}
 */
proto.wlservice.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.Empty;
  return proto.wlservice.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.Empty}
 */
proto.wlservice.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wlservice.Filter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordlistid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    filterList: jspb.Message.toObjectList(msg.getFilterList(),
    proto.wlservice.Id.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.Filter}
 */
proto.wlservice.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.Filter;
  return proto.wlservice.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.Filter}
 */
proto.wlservice.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWordlistid(value);
      break;
    case 2:
      var value = new proto.wlservice.Id;
      reader.readMessage(value,proto.wlservice.Id.deserializeBinaryFromReader);
      msg.addFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordlistid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFilterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.wlservice.Id.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 wordlistID = 1;
 * @return {number}
 */
proto.wlservice.Filter.prototype.getWordlistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wlservice.Filter} returns this
 */
proto.wlservice.Filter.prototype.setWordlistid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Id filter = 2;
 * @return {!Array<!proto.wlservice.Id>}
 */
proto.wlservice.Filter.prototype.getFilterList = function() {
  return /** @type{!Array<!proto.wlservice.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wlservice.Id, 2));
};


/**
 * @param {!Array<!proto.wlservice.Id>} value
 * @return {!proto.wlservice.Filter} returns this
*/
proto.wlservice.Filter.prototype.setFilterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wlservice.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wlservice.Id}
 */
proto.wlservice.Filter.prototype.addFilter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wlservice.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wlservice.Filter} returns this
 */
proto.wlservice.Filter.prototype.clearFilterList = function() {
  return this.setFilterList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.Id.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.Id.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.Id} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Id.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.Id}
 */
proto.wlservice.Id.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.Id;
  return proto.wlservice.Id.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.Id} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.Id}
 */
proto.wlservice.Id.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.Id.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.Id.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.Id} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Id.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.wlservice.Id.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wlservice.Id} returns this
 */
proto.wlservice.Id.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wlservice.Wordlists.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.Wordlists.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.Wordlists.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.Wordlists} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Wordlists.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordlistinfoList: jspb.Message.toObjectList(msg.getWordlistinfoList(),
    proto.wlservice.WordlistInfo.toObject, includeInstance),
    serverinfo: (f = msg.getServerinfo()) && proto.wlservice.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.Wordlists}
 */
proto.wlservice.Wordlists.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.Wordlists;
  return proto.wlservice.Wordlists.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.Wordlists} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.Wordlists}
 */
proto.wlservice.Wordlists.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wlservice.WordlistInfo;
      reader.readMessage(value,proto.wlservice.WordlistInfo.deserializeBinaryFromReader);
      msg.addWordlistinfo(value);
      break;
    case 2:
      var value = new proto.wlservice.Response;
      reader.readMessage(value,proto.wlservice.Response.deserializeBinaryFromReader);
      msg.setServerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.Wordlists.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.Wordlists.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.Wordlists} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Wordlists.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordlistinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wlservice.WordlistInfo.serializeBinaryToWriter
    );
  }
  f = message.getServerinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.wlservice.Response.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WordlistInfo wordlistInfo = 1;
 * @return {!Array<!proto.wlservice.WordlistInfo>}
 */
proto.wlservice.Wordlists.prototype.getWordlistinfoList = function() {
  return /** @type{!Array<!proto.wlservice.WordlistInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wlservice.WordlistInfo, 1));
};


/**
 * @param {!Array<!proto.wlservice.WordlistInfo>} value
 * @return {!proto.wlservice.Wordlists} returns this
*/
proto.wlservice.Wordlists.prototype.setWordlistinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wlservice.WordlistInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wlservice.WordlistInfo}
 */
proto.wlservice.Wordlists.prototype.addWordlistinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wlservice.WordlistInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wlservice.Wordlists} returns this
 */
proto.wlservice.Wordlists.prototype.clearWordlistinfoList = function() {
  return this.setWordlistinfoList([]);
};


/**
 * optional Response serverInfo = 2;
 * @return {?proto.wlservice.Response}
 */
proto.wlservice.Wordlists.prototype.getServerinfo = function() {
  return /** @type{?proto.wlservice.Response} */ (
    jspb.Message.getWrapperField(this, proto.wlservice.Response, 2));
};


/**
 * @param {?proto.wlservice.Response|undefined} value
 * @return {!proto.wlservice.Wordlists} returns this
*/
proto.wlservice.Wordlists.prototype.setServerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wlservice.Wordlists} returns this
 */
proto.wlservice.Wordlists.prototype.clearServerinfo = function() {
  return this.setServerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wlservice.Wordlists.prototype.hasServerinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wlservice.WordlistInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.WordlistInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.WordlistInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.WordlistInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.WordlistInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordlistname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wordlistid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.wlservice.Word.toObject, includeInstance),
    serverinfo: (f = msg.getServerinfo()) && proto.wlservice.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.WordlistInfo}
 */
proto.wlservice.WordlistInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.WordlistInfo;
  return proto.wlservice.WordlistInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.WordlistInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.WordlistInfo}
 */
proto.wlservice.WordlistInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordlistname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWordlistid(value);
      break;
    case 5:
      var value = new proto.wlservice.Word;
      reader.readMessage(value,proto.wlservice.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 6:
      var value = new proto.wlservice.Response;
      reader.readMessage(value,proto.wlservice.Response.deserializeBinaryFromReader);
      msg.setServerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.WordlistInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.WordlistInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.WordlistInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.WordlistInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordlistname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWordlistid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.wlservice.Word.serializeBinaryToWriter
    );
  }
  f = message.getServerinfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.wlservice.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional string wordlistName = 1;
 * @return {string}
 */
proto.wlservice.WordlistInfo.prototype.getWordlistname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wlservice.WordlistInfo} returns this
 */
proto.wlservice.WordlistInfo.prototype.setWordlistname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.wlservice.WordlistInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wlservice.WordlistInfo} returns this
 */
proto.wlservice.WordlistInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 userID = 3;
 * @return {number}
 */
proto.wlservice.WordlistInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wlservice.WordlistInfo} returns this
 */
proto.wlservice.WordlistInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 wordlistID = 4;
 * @return {number}
 */
proto.wlservice.WordlistInfo.prototype.getWordlistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.wlservice.WordlistInfo} returns this
 */
proto.wlservice.WordlistInfo.prototype.setWordlistid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Word words = 5;
 * @return {!Array<!proto.wlservice.Word>}
 */
proto.wlservice.WordlistInfo.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.wlservice.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wlservice.Word, 5));
};


/**
 * @param {!Array<!proto.wlservice.Word>} value
 * @return {!proto.wlservice.WordlistInfo} returns this
*/
proto.wlservice.WordlistInfo.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.wlservice.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wlservice.Word}
 */
proto.wlservice.WordlistInfo.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.wlservice.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wlservice.WordlistInfo} returns this
 */
proto.wlservice.WordlistInfo.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional Response serverInfo = 6;
 * @return {?proto.wlservice.Response}
 */
proto.wlservice.WordlistInfo.prototype.getServerinfo = function() {
  return /** @type{?proto.wlservice.Response} */ (
    jspb.Message.getWrapperField(this, proto.wlservice.Response, 6));
};


/**
 * @param {?proto.wlservice.Response|undefined} value
 * @return {!proto.wlservice.WordlistInfo} returns this
*/
proto.wlservice.WordlistInfo.prototype.setServerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wlservice.WordlistInfo} returns this
 */
proto.wlservice.WordlistInfo.prototype.clearServerinfo = function() {
  return this.setServerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wlservice.WordlistInfo.prototype.hasServerinfo = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.Word}
 */
proto.wlservice.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.Word;
  return proto.wlservice.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.Word}
 */
proto.wlservice.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.wlservice.Word.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wlservice.Word} returns this
 */
proto.wlservice.Word.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.wlservice.Word.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wlservice.Word} returns this
 */
proto.wlservice.Word.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Id = 3;
 * @return {number}
 */
proto.wlservice.Word.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wlservice.Word} returns this
 */
proto.wlservice.Word.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wlservice.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.wlservice.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wlservice.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responsebody: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wlservice.Response}
 */
proto.wlservice.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wlservice.Response;
  return proto.wlservice.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wlservice.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wlservice.Response}
 */
proto.wlservice.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsebody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wlservice.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wlservice.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wlservice.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wlservice.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResponsebody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.wlservice.Response.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wlservice.Response} returns this
 */
proto.wlservice.Response.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string responseBody = 2;
 * @return {string}
 */
proto.wlservice.Response.prototype.getResponsebody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wlservice.Response} returns this
 */
proto.wlservice.Response.prototype.setResponsebody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.wlservice);
